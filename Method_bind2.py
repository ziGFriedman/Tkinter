'''Что делать, если в функцию надо передать дополнительные аргументы? Например,
клик левой кнопкой мыши по метке устанавливает для нее один шрифт, а клик правой
кнопкой мыши – другой. Можно написать две разные функции:'''
from tkinter import *

root = Tk()

def font1(event):
    l['font'] = "Verdana"
def font2(event):
    l['font'] = "Times"

l = Label(text = "Hello World")

l.bind('<Button-1>', font1) # ЛКМ
l.bind('<Button-3>', font2) # ПКМ
l.pack()

root.mainloop()

# Но это не совсем правильно, так как код тела функций фактически идентичен, а имя
# шрифта можно передавать как аргумент. Лучше определить одну функцию:
# …
# def changeFont(event, font):
#     l['font'] = font
# …

'''Однако возникает проблема, как передать дополнительный аргумент функции в метод bind()?
Ведь в этот метод мы передаем объект-функцию, но не вызываем ее. Нельзя написать
l.bind('<Button-1>', changeFont(event, "Verdana")). Потому что как только вы поставили
после имени функции скобки, то значит вызвали ее, то есть заставили тело функции
выполниться. Если в функции нет оператора return, то она возвращает None. Поэтому
получается, что даже если правильно передать аргументы, то в метод bind() попадет None,
но не объект-функция.
На помощь приходят так называемые анонимные объекты-функции Python, которые создаются
инструкцией lambda. Применительно к нашей программе выглядеть это будет так:'''
# …
# l.bind('<Button-1>', lambda event, f = "Verdana": changeFont(event, f))
# l.bind('<Button-3>', lambda event, f = "Times": changeFont(event, f))
# …

'''Лямбда-функции можно использовать не только с методом bind(), но и опцией command,
имеющейся у ряда виджет. Если функция передается через command, ей не нужен параметр
event. Здесь обрабатывается только одно основное событие для виджета – клик левой кнопкой
мыши.
У меток нет command, однако это свойство есть у кнопок:'''
from tkinter import *

root = Tk()

def changeFont(font):
    l['font'] = font

l = Label(text = "Hello World")
l.pack()
Button(command = lambda f = "Verdana": changeFont(f)).pack()
Button(command = lambda f = "Times": changeFont(f)).pack()

root.mainloop()
